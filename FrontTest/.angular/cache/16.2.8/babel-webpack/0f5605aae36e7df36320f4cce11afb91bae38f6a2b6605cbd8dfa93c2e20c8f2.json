{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as moment from 'moment';\nexport const MY_DATE_FORMATS = {\n  parse: {\n    dateInput: 'DD/MM/YYYY'\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\nexport let DialogAddEditComponent = class DialogAddEditComponent {\n  constructor(dialogReference, fb, _snackBar, _branchService, _currencyService, dataBranch) {\n    this.dialogReference = dialogReference;\n    this.fb = fb;\n    this._snackBar = _snackBar;\n    this._branchService = _branchService;\n    this._currencyService = _currencyService;\n    this.dataBranch = dataBranch;\n    this.title = \"Nuevo\";\n    this.actionButton = \"Guardar\";\n    this.lstCurrency = [];\n    this.formBranch = this.fb.group({\n      branchCode: [\"\", Validators.required],\n      branchDescription: [\"\", [Validators.required, Validators.maxLength(250)]],\n      branchAddress: [\"\", [Validators.required, Validators.maxLength(250)]],\n      branchId: [\"\", [Validators.required, Validators.maxLength(50)]],\n      branchDateCreation: [\"\", [Validators.required, this.dateValidator]],\n      idCurrency: [\"\", Validators.required],\n      currencyName: [\"\", Validators.required]\n    });\n    this._currencyService.getList().subscribe({\n      next: data => {\n        this.lstCurrency = data;\n      },\n      error: e => {}\n    });\n  }\n  dateValidator(control) {\n    if (control?.value) {\n      const today = new Date();\n      const dateToCheck = new Date(control.value);\n      if (dateToCheck < today) {\n        return {\n          'Invalid date': true\n        };\n      }\n    }\n    return null;\n  }\n  showAlert(message, action) {\n    this._snackBar.open(message, action, {\n      horizontalPosition: \"end\",\n      verticalPosition: \"top\",\n      duration: 3000\n    });\n  }\n  addEditBranch() {\n    const modelo = {\n      IdBranch: 0,\n      BranchCode: this.formBranch.value.branchCode,\n      BranchDescription: this.formBranch.value.branchDescription,\n      BranchAddress: this.formBranch.value.branchAddress,\n      BranchId: this.formBranch.value.branchId,\n      BranchDateCreation: moment(this.formBranch.value.branchDateCreation).format(\"DD/MM/YYYY\"),\n      IdCurrency: this.formBranch.value.idCurrency,\n      CurrencyName: this.formBranch.value.currencyName\n    };\n    if (this.dataBranch == null) {\n      this._branchService.add(modelo).subscribe({\n        next: data => {\n          this.showAlert(\"Sucursal Creada\", \"Listo\");\n          this.dialogReference.close(\"creado\");\n        },\n        error: e => {\n          this.showAlert(\"Error al crea la sucursal\", \"Error\");\n        }\n      });\n    } else {\n      this._branchService.update(this.dataBranch.IdBranch, modelo).subscribe({\n        next: data => {\n          this.showAlert(\"Sucursal Actualizada\", \"Listo\");\n          this.dialogReference.close(\"actualizado\");\n        },\n        error: e => {\n          this.showAlert(\"Error al creal la sucursal\", \"Error\");\n        }\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.dataBranch) {\n      this.formBranch.patchValue({\n        idBranch: this.dataBranch.IdBranch,\n        branchCode: this.dataBranch.BranchCode,\n        branchDescription: this.dataBranch.BranchDescription,\n        branchAddress: this.dataBranch.BranchAddress,\n        branchId: this.dataBranch.BranchId,\n        branchDateCreation: moment(this.dataBranch.BranchDateCreation).format(\"DD/MM/YYYY\"),\n        idCurrency: this.dataBranch.IdCurrency,\n        CurrencyName: this.dataBranch.CurrencyName\n      });\n      this.title = \"Editar\";\n      this.actionButton = \"Actualizar\";\n    }\n  }\n};\nDialogAddEditComponent = __decorate([Component({\n  selector: 'app-dialog-add-edit',\n  templateUrl: './dialog-add-edit.component.html',\n  styleUrls: ['./dialog-add-edit.component.css'],\n  providers: [{\n    provide: MAT_DATE_FORMATS,\n    useValue: MY_DATE_FORMATS\n  }]\n}), __param(5, Inject(MAT_DIALOG_DATA))], DialogAddEditComponent);","map":{"version":3,"names":["Component","Inject","Validators","MAT_DIALOG_DATA","MAT_DATE_FORMATS","moment","MY_DATE_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DialogAddEditComponent","constructor","dialogReference","fb","_snackBar","_branchService","_currencyService","dataBranch","title","actionButton","lstCurrency","formBranch","group","branchCode","required","branchDescription","maxLength","branchAddress","branchId","branchDateCreation","dateValidator","idCurrency","currencyName","getList","subscribe","next","data","error","e","control","value","today","Date","dateToCheck","showAlert","message","action","open","horizontalPosition","verticalPosition","duration","addEditBranch","modelo","IdBranch","BranchCode","BranchDescription","BranchAddress","BranchId","BranchDateCreation","format","IdCurrency","CurrencyName","add","close","update","ngOnInit","patchValue","idBranch","__decorate","selector","templateUrl","styleUrls","providers","provide","useValue","__param"],"sources":["D:\\Proyectos_WEB\\Prueba_Quala_Front\\FrontTest\\src\\app\\Modals\\dialog-add-edit\\dialog-add-edit.component.ts"],"sourcesContent":["import { Component,OnInit,Inject } from '@angular/core';\nimport{FormBuilder,FormGroup,Validators,FormControl, ValidationErrors, AbstractControl} from \"@angular/forms\";\nimport {MatDialogRef,MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport{MAT_DATE_FORMATS} from '@angular/material/core';\nimport * as moment from 'moment';\n\nimport { Branch } from 'src/app/Interfaces/branch';\nimport { BranchService } from 'src/app/Services/branch.service';\nimport { Currency } from 'src/app/Interfaces/currency';\nimport { CurrencyService } from 'src/app/Services/currency.service';\n\n\n\nexport const MY_DATE_FORMATS={\n  parse:{\n    dateInput: 'DD/MM/YYYY',\n  },\n  display:{\n    dateInput:'DD/MM/YYYY',\n    monthYearLabel:'MMMM YYYY',\n    dateA11yLabel:'LL',\n    monthYearA11yLabel:'MMMM YYYY'\n\n  }\n}\n\n@Component({\n  selector: 'app-dialog-add-edit',\n  templateUrl: './dialog-add-edit.component.html',\n  styleUrls: ['./dialog-add-edit.component.css'],\n  providers:[\n    {\n      provide:MAT_DATE_FORMATS,useValue:MY_DATE_FORMATS\n    }\n  ]\n})\nexport class DialogAddEditComponent implements OnInit {\n  formBranch:FormGroup;\n  title:string = \"Nuevo\";\n  actionButton:string =\"Guardar\";\n  lstCurrency:Currency[]=[];\n\n  constructor(\n    private dialogReference:MatDialogRef<DialogAddEditComponent>,\n    private fb: FormBuilder,\n    private _snackBar: MatSnackBar,\n    private _branchService:BranchService,\n    private _currencyService:CurrencyService,\n    @Inject(MAT_DIALOG_DATA) public dataBranch:Branch\n  ){\n    this.formBranch = this.fb.group({\n      branchCode:[\"\",Validators.required], \n      branchDescription:[\"\",[Validators.required,Validators.maxLength(250)]], \n      branchAddress:[\"\",[Validators.required,Validators.maxLength(250)]], \n      branchId:[\"\",[Validators.required,Validators.maxLength(50)]], \n      branchDateCreation:[\"\",[Validators.required,this.dateValidator]],\n      idCurrency:[\"\",Validators.required],\n      currencyName:[\"\",Validators.required]\n    })\n\n    this._currencyService.getList().subscribe({\n      next:(data)=>{\n        this.lstCurrency=data;\n        \n      },error:(e)=>{}\n  })\n\n  }\n\ndateValidator(control: AbstractControl): { [key: string]: boolean } | null {\n  if (control?.value) {\n      const today = new Date();\n      const dateToCheck = new Date(control.value);\n      if (dateToCheck < today) {\n          return {'Invalid date': true}\n      }\n  }\n  return null;\n}\n\n  showAlert(message: string, action: string) {\n    this._snackBar.open(message, action,{\n      horizontalPosition:\"end\",\n      verticalPosition:\"top\",\n      duration:3000\n    });\n  }\n\n  addEditBranch(){\n    const modelo:Branch={\n      IdBranch:0,\n      BranchCode: this.formBranch.value.branchCode,\n      BranchDescription: this.formBranch.value.branchDescription,\n      BranchAddress:this.formBranch.value.branchAddress,\n      BranchId:this.formBranch.value.branchId,\n      BranchDateCreation:moment(this.formBranch.value.branchDateCreation).format(\"DD/MM/YYYY\"),\n      IdCurrency:this.formBranch.value.idCurrency,\n      CurrencyName:this.formBranch.value.currencyName\n    }\n    if(this.dataBranch == null){\n      this._branchService.add(modelo).subscribe({\n        next:(data)=>{\n          this.showAlert(\"Sucursal Creada\",\"Listo\");\n          this.dialogReference.close(\"creado\");\n        },error:(e)=>{\n          this.showAlert(\"Error al crea la sucursal\",\"Error\");\n        }\n      })\n    }\n    else{\n      this._branchService.update(this.dataBranch.IdBranch,modelo).subscribe({\n        next:(data)=>{\n          this.showAlert(\"Sucursal Actualizada\",\"Listo\");\n          this.dialogReference.close(\"actualizado\");\n        },error:(e)=>{\n          this.showAlert(\"Error al creal la sucursal\",\"Error\");\n        }\n      })\n    }\n  }\n\n  ngOnInit():void{\n    if(this.dataBranch){\n      this.formBranch.patchValue(\n        {\n          idBranch:this.dataBranch.IdBranch,\n          branchCode:this.dataBranch.BranchCode,\n          branchDescription:this.dataBranch.BranchDescription,\n          branchAddress:this.dataBranch.BranchAddress,\n          branchId:this.dataBranch.BranchId,\n          branchDateCreation:moment(this.dataBranch.BranchDateCreation).format(\"DD/MM/YYYY\"),\n          idCurrency:this.dataBranch.IdCurrency,\n          CurrencyName:this.dataBranch.CurrencyName\n        }\n      )\n      this.title = \"Editar\";\n      this.actionButton = \"Actualizar\"\n    }\n\n\n\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}